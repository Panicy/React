{"ast":null,"code":"import _toConsumableArray from \"D:\\\\React\\\\list\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"D:\\\\React\\\\list\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\React\\\\list\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\React\\\\list\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\React\\\\list\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\React\\\\list\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\React\\\\list\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\React\\\\list\\\\src\\\\ReactDemo.js\";\n// 1.引入React组件\nimport React, { Component, Fragment } from 'react'; //引入css\n\nimport './index.css'; //引入组件\n\nimport ListItem from './listItem.js'; //2.用class定义组件\n\nvar ReactDemo =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ReactDemo, _Component);\n\n  //组件默认加载数据\n  function ReactDemo(props) {\n    var _this;\n\n    _classCallCheck(this, ReactDemo);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReactDemo).call(this, props)); //state 负责存储组件里的数据\n\n    _this.state = {\n      list: ['学习Flutter', '学习React', '学习Vue'],\n      inputValue: ''\n    };\n    _this.handleBtn = _this.handleBtn.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleInputValue = _this.handleInputValue.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleDelete = _this.handleDelete.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //3.render函数return 模板\n\n\n  _createClass(ReactDemo, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"insertArea\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"\\u8F93\\u5165\\u5185\\u5BB9\"), React.createElement(\"input\", {\n        value: this.state.inputValue,\n        placeholder: \"TodoList\",\n        onChange: this.handleInputValue,\n        className: \"input\",\n        id: \"insertArea\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.handleBtn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"\\u63D0\\u4EA4\"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, this.getItem())));\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem() {\n      var _this2 = this;\n\n      //Es6map循环\n      return this.state.list.map(function (item, index) {\n        return React.createElement(\"div\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, React.createElement(ListItem, {\n          content: item,\n          index: index //传递到子组件时绑定this\n          ,\n          deleteFns: _this2.handleDelete,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        })); // return  <li key={index} onClick={this.handleDelete.bind(this,index)}\n        //             dangerouslySetInnerHTML={{__html:item}}\n        //         >\n        //             {/* {item} */}\n        //         </li>\n      });\n    }\n  }, {\n    key: \"handleInputValue\",\n    value: function handleInputValue(e) {\n      var value = e.target.value;\n      this.setState(function () {\n        return {\n          inputValue: value\n        };\n      });\n    } //数组新增\n\n  }, {\n    key: \"handleBtn\",\n    value: function handleBtn() {\n      this.setState({\n        //Es6数组连接 ...展开运算符\n        //数组新增\n        list: [].concat(_toConsumableArray(this.state.list), [this.state.inputValue]),\n        inputValue: ''\n      });\n    } //数组删除\n\n  }, {\n    key: \"handleDelete\",\n    value: function handleDelete(index) {\n      console.log(index);\n\n      var list = _toConsumableArray(this.state.list); //splice 删除第一个参数 从第几个开始， 第二个参数  输出几个\n\n\n      list.splice(index, 1);\n      this.setState({\n        list: list\n      });\n    }\n  }]);\n\n  return ReactDemo;\n}(Component); //4.输出\n\n\nexport default ReactDemo;","map":{"version":3,"sources":["D:\\React\\list\\src\\ReactDemo.js"],"names":["React","Component","Fragment","ListItem","ReactDemo","props","state","list","inputValue","handleBtn","bind","handleInputValue","handleDelete","getItem","map","item","index","e","value","target","setState","console","log","splice"],"mappings":";;;;;;;;AAAA;AACA,OAAOA,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,QAAwC,OAAxC,C,CACA;;AACA,OAAO,aAAP,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,eAArB,C,CAGA;;IACMC,S;;;;;AAEF;AACA,qBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,mFAAMA,KAAN,GADc,CAEd;;AACA,UAAKC,KAAL,GAAW;AACPC,MAAAA,IAAI,EAAC,CACD,WADC,EAED,SAFC,EAGD,OAHC,CADE;AAMPC,MAAAA,UAAU,EAAC;AANJ,KAAX;AAQA,UAAKC,SAAL,GAAe,MAAKA,SAAL,CAAeC,IAAf,uDAAf;AACA,UAAKC,gBAAL,GAAsB,MAAKA,gBAAL,CAAsBD,IAAtB,uDAAtB;AACA,UAAKE,YAAL,GAAkB,MAAKA,YAAL,CAAkBF,IAAlB,uDAAlB;AAbc;AAcjB,G,CAGL;;;;;6BACY;AACJ,aACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,OAAO,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADJ,EAGI;AAAO,QAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWE,UAAzB;AAAqC,QAAA,WAAW,EAAC,UAAjD;AACO,QAAA,QAAQ,EAAE,KAAKG,gBADtB;AAEO,QAAA,SAAS,EAAC,OAFjB;AAGO,QAAA,EAAE,EAAC,YAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,EASI;AAAQ,QAAA,OAAO,EAAE,KAAKF,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBATJ,EAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACM,KAAKI,OAAL,EADN,CAVJ,CADJ,CADJ;AAkBH;;;8BACQ;AAAA;;AACL;AACF,aAAO,KAAKP,KAAL,CAAWC,IAAX,CAAgBO,GAAhB,CAAoB,UAACC,IAAD,EAAMC,KAAN,EAAc;AACnC,eACI;AAAK,UAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,QAAD;AACA,UAAA,OAAO,EAAED,IADT;AAEA,UAAA,KAAK,EAAEC,KAFP,CAGA;AAHA;AAIA,UAAA,SAAS,EAAE,MAAI,CAACJ,YAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ,CADmC,CAWnC;AACA;AACA;AACA;AACA;AACH,OAhBI,CAAP;AAiBD;;;qCAEgBK,C,EAAE;AACf,UAAMC,KAAK,GAACD,CAAC,CAACE,MAAF,CAASD,KAArB;AACA,WAAKE,QAAL,CAAc,YAAI;AACd,eAAM;AACFZ,UAAAA,UAAU,EAACU;AADT,SAAN;AAGH,OAJD;AAMH,K,CAED;;;;gCACW;AACP,WAAKE,QAAL,CAAc;AACN;AACA;AACJb,QAAAA,IAAI,+BAAK,KAAKD,KAAL,CAAWC,IAAhB,IAAqB,KAAKD,KAAL,CAAWE,UAAhC,EAHM;AAIVA,QAAAA,UAAU,EAAC;AAJD,OAAd;AAOH,K,CACD;;;;iCACaQ,K,EAAM;AACfK,MAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;;AACA,UAAMT,IAAI,sBAAK,KAAKD,KAAL,CAAWC,IAAhB,CAAV,CAFe,CAGf;;;AACAA,MAAAA,IAAI,CAACgB,MAAL,CAAYP,KAAZ,EAAkB,CAAlB;AACA,WAAKI,QAAL,CAAc;AACVb,QAAAA,IAAI,EAACA;AADK,OAAd;AAIH;;;;EA5FmBN,S,GAgGxB;;;AACA,eAAeG,SAAf","sourcesContent":["// 1.引入React组件\r\nimport React ,{Component,Fragment} from 'react';\r\n//引入css\r\nimport './index.css';\r\n\r\n//引入组件\r\nimport ListItem from './listItem.js';\r\n\r\n\r\n//2.用class定义组件\r\nclass ReactDemo extends Component{\r\n\r\n    //组件默认加载数据\r\n    constructor(props){\r\n        super(props);\r\n        //state 负责存储组件里的数据\r\n        this.state={\r\n            list:[\r\n                '学习Flutter',\r\n                '学习React',\r\n                '学习Vue'\r\n            ],\r\n            inputValue:''\r\n        }\r\n        this.handleBtn=this.handleBtn.bind(this);\r\n        this.handleInputValue=this.handleInputValue.bind(this);\r\n        this.handleDelete=this.handleDelete.bind(this);\r\n    }\r\n\r\n\r\n//3.render函数return 模板\r\n    render(){\r\n        return(\r\n            <Fragment>\r\n                <div>\r\n                    <label htmlFor='insertArea'>输入内容</label>\r\n                    {/* 绑定数据以及事件时必须在前面加this  bind绑定this指向*/}\r\n                    <input value={this.state.inputValue} placeholder='TodoList'\r\n                           onChange={this.handleInputValue}\r\n                           className='input'\r\n                           id='insertArea'\r\n                    ></input>\r\n                    {/* this很重要 */}\r\n                    <button onClick={this.handleBtn}>提交</button>\r\n                    <ul>\r\n                        { this.getItem() }\r\n                    </ul>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n    getItem(){\r\n        //Es6map循环\r\n      return this.state.list.map((item,index)=>{\r\n            return  (\r\n                <div key={index}>\r\n                    <ListItem \r\n                    content={item} \r\n                    index={index}\r\n                    //传递到子组件时绑定this\r\n                    deleteFns={this.handleDelete}\r\n                    />\r\n                </div>\r\n            )\r\n            // return  <li key={index} onClick={this.handleDelete.bind(this,index)}\r\n            //             dangerouslySetInnerHTML={{__html:item}}\r\n            //         >\r\n            //             {/* {item} */}\r\n            //         </li>\r\n        })\r\n    }\r\n\r\n    handleInputValue(e){\r\n        const value=e.target.value;\r\n        this.setState(()=>{\r\n            return{\r\n                inputValue:value\r\n            }\r\n        })\r\n       \r\n    }\r\n\r\n    //数组新增\r\n    handleBtn(){\r\n        this.setState({\r\n                //Es6数组连接 ...展开运算符\r\n                //数组新增\r\n            list:[...this.state.list,this.state.inputValue],\r\n            inputValue:''\r\n\r\n        })\r\n    }\r\n    //数组删除\r\n    handleDelete(index){\r\n        console.log(index)\r\n        const list=[...this.state.list];\r\n        //splice 删除第一个参数 从第几个开始， 第二个参数  输出几个\r\n        list.splice(index,1);\r\n        this.setState({\r\n            list:list\r\n        })\r\n        \r\n    }\r\n\r\n}\r\n\r\n//4.输出\r\nexport default ReactDemo;"]},"metadata":{},"sourceType":"module"}