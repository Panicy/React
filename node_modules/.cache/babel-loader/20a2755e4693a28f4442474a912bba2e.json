{"ast":null,"code":"import _classCallCheck from \"D:\\\\React\\\\list\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\React\\\\list\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\React\\\\list\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\React\\\\list\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\React\\\\list\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\React\\\\list\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\React\\\\list\\\\src\\\\listItem.js\";\nimport React from 'react'; // 引用PropTypes\n\nimport PropTypes from 'prop-types';\n\nvar ListItem =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ListItem, _React$Component);\n\n  function ListItem(props) {\n    var _this;\n\n    _classCallCheck(this, ListItem);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListItem).call(this, props)); //绑定this指向\n\n    _this.handleItem = _this.handleItem.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //一个组件要从父组件接收参数\n  //只要父组件的render函数被重新执行了,子组件的这个生命周期函数就会被执行\n\n\n  _createClass(ListItem, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps() {\n      console.log('componentWillReceiveProps');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // ES6结构赋值\n      var content = this.props.content;\n      return React.createElement(\"div\", {\n        onClick: this.handleItem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, content);\n    }\n  }, {\n    key: \"handleItem\",\n    value: function handleItem() {\n      // ES6结构赋值\n      var _this$props = this.props,\n          deleteFns = _this$props.deleteFns,\n          index = _this$props.index;\n      deleteFns(index);\n    }\n  }]);\n\n  return ListItem;\n}(React.Component); // 校验数据类型\n\n\nListItem.propTypes = {\n  //必须参数\n  //test:PropTypes.string.isRequired,\n  //传两个参数\n  name: PropTypes.arrayOf(PropTypes.number, PropTypes.string),\n  content: PropTypes.string,\n  handleItem: PropTypes.func,\n  index: PropTypes.number //数据默认属性\n\n};\nListItem.defaultProps = {// test:'6666'\n};\nexport default ListItem;","map":{"version":3,"sources":["D:\\React\\list\\src\\listItem.js"],"names":["React","PropTypes","ListItem","props","handleItem","bind","console","log","content","deleteFns","index","Component","propTypes","name","arrayOf","number","string","func","defaultProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,YAAtB;;IAEMC,Q;;;;;AAEF,oBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,kFAAMA,KAAN,GADc,CAEd;;AACA,UAAKC,UAAL,GAAgB,MAAKA,UAAL,CAAgBC,IAAhB,uDAAhB;AAHc;AAIjB,G,CACD;AACA;;;;;gDAC2B;AACvBC,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACH;;;6BAEO;AACJ;AADI,UAEIC,OAFJ,GAEc,KAAKL,KAFnB,CAEIK,OAFJ;AAGJ,aAAO;AAAK,QAAA,OAAO,EAAE,KAAKJ,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgCI,OAAhC,CAAP;AACH;;;iCAEW;AACP;AADO,wBAEiB,KAAKL,KAFtB;AAAA,UAEAM,SAFA,eAEAA,SAFA;AAAA,UAEUC,KAFV,eAEUA,KAFV;AAGRD,MAAAA,SAAS,CAACC,KAAD,CAAT;AACH;;;;EAvBkBV,KAAK,CAACW,S,GA0B7B;;;AACAT,QAAQ,CAACU,SAAT,GAAmB;AACf;AACA;AACA;AACAC,EAAAA,IAAI,EAACZ,SAAS,CAACa,OAAV,CAAkBb,SAAS,CAACc,MAA5B,EAAmCd,SAAS,CAACe,MAA7C,CAJU;AAKfR,EAAAA,OAAO,EAACP,SAAS,CAACe,MALH;AAMfZ,EAAAA,UAAU,EAACH,SAAS,CAACgB,IANN;AAOfP,EAAAA,KAAK,EAACT,SAAS,CAACc,MAPD,CASnB;;AATmB,CAAnB;AAUAb,QAAQ,CAACgB,YAAT,GAAsB,CAClB;AADkB,CAAtB;AAIA,eAAehB,QAAf","sourcesContent":["import React from 'react';\r\n// 引用PropTypes\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ListItem extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        //绑定this指向\r\n        this.handleItem=this.handleItem.bind(this);\r\n    }\r\n    //一个组件要从父组件接收参数\r\n    //只要父组件的render函数被重新执行了,子组件的这个生命周期函数就会被执行\r\n    componentWillReceiveProps(){\r\n        console.log('componentWillReceiveProps')\r\n    }\r\n\r\n    render(){\r\n        // ES6结构赋值\r\n        const { content }=this.props;\r\n        return <div onClick={this.handleItem}>{content}</div>\r\n    }\r\n\r\n    handleItem(){\r\n         // ES6结构赋值\r\n        const { deleteFns,index}=this.props;\r\n        deleteFns(index);\r\n    }\r\n}\r\n\r\n// 校验数据类型\r\nListItem.propTypes={\r\n    //必须参数\r\n    //test:PropTypes.string.isRequired,\r\n    //传两个参数\r\n    name:PropTypes.arrayOf(PropTypes.number,PropTypes.string),\r\n    content:PropTypes.string,\r\n    handleItem:PropTypes.func,\r\n    index:PropTypes.number\r\n}\r\n//数据默认属性\r\nListItem.defaultProps={\r\n    // test:'6666'\r\n}\r\n\r\nexport default ListItem;"]},"metadata":{},"sourceType":"module"}